using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using SilcoSedonaCustomApi;
using SilcoSedonaCustomApi.Models;

namespace SilcoSedonaCustomApi.Controllers
{
    public class SV_InspectionController : ApiController
    {
        private SilcoSedona db = new SilcoSedona();

        // GET: api/SV_Inspection
        //public IQueryable<SV_Inspection> GetSV_Inspection()
        //{
        //    return db.SV_Inspection;
        //}

        // GET: api/SV_Inspection/5
       // [ResponseType(typeof(SV_Inspection))]
       [HttpGet]
        public IHttpActionResult GetSV_Inspection(int inspectionid )
        {
            // SV_Inspection sV_Inspection = db.SV_Inspection.Find(id);
            SV_Inspection sV_Inspection = db.SV_Inspection.SingleOrDefault(m => m.Inspection_Id == inspectionid);
            if (sV_Inspection == null)
            {
                return NotFound();
            }
        //    SV_Inspection a = p from SV_inspection

            return Ok(sV_Inspection);
        }
       

        // PUT: api/SV_Inspection/5
      //  [ResponseType(typeof(void))]
      //  public IHttpActionResult PutSV_Inspection(int id, SV_Inspection sV_Inspection)
      [HttpPut]
      public IHttpActionResult PutSV_Inspection(int id, SV_Inspection sv_Inspection)
        {
           // Int32 rte = sv_Inspection.Route_Id;
            DateTime nextdate = sv_Inspection.Next_Inspection_Date;
             int rte = Convert.ToInt16(sv_Inspection.Route_Id);
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != sv_Inspection.Inspection_Id)
            {
               return BadRequest();
            }

            // the statement below was not working it was generated by the wizard in Entity Frameworks
            //  Sedona's Sv_inspection file does not have any keys which is a big nono in entity frameworks so 
            // the next 4 statements is where I'm taking the model passed and trying to update another instance to save 

            //  db.Entry(sv_Inspection).State = EntityState.Modified;
            //   SV_Inspection sv = new SV_Inspection { Inspection_Id = id };
            //    db.SV_Inspection.Attach(sv);
            //    sv.Next_Inspection_Date = sv_Inspection.Next_Inspection_Date;
            //     sv.Route_Id = sv_Inspection.Route_Id;
           
            try
            {
                // List<CustSilco_AllInspForSiteServiceComp_Result> srchinsp = 
                bool inspsuccess =
                   Helper.CustSilco_SV_Inspection(id, nextdate, rte);



                //  db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!SV_InspectionExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        //// POST: api/SV_Inspection
        //[ResponseType(typeof(SV_Inspection))]
        //public IHttpActionResult PostSV_Inspection(SV_Inspection sV_Inspection)
        //{
        //    if (!ModelState.IsValid)
        //    {
        //        return BadRequest(ModelState);
        //    }

        //    db.SV_Inspection.Add(sV_Inspection);

        //    try
        //    {
        //        db.SaveChanges();
        //    }
        //    catch (DbUpdateException)
        //    {
        //        if (SV_InspectionExists(sV_Inspection.Inspection_Id))
        //        {
        //            return Conflict();
        //        }
        //        else
        //        {
        //            throw;
        //        }
        //    }

        //    return CreatedAtRoute("DefaultApi", new { id = sV_Inspection.Inspection_Id }, sV_Inspection);
        //}

        //// DELETE: api/SV_Inspection/5
        //[ResponseType(typeof(SV_Inspection))]
        //public IHttpActionResult DeleteSV_Inspection(int id)
        //{
        //    SV_Inspection sV_Inspection = db.SV_Inspection.Find(id);
        //    if (sV_Inspection == null)
        //    {
        //        return NotFound();
        //    }

        //    db.SV_Inspection.Remove(sV_Inspection);
        //    db.SaveChanges();

        //    return Ok(sV_Inspection);
        //}

        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //    {
        //        db.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}

        private bool SV_InspectionExists(int id)
        {
            return db.SV_Inspection.Count(e => e.Inspection_Id == id) > 0;
        }
    }
}